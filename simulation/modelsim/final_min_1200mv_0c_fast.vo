// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "12/14/2017 12:37:43"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module toplevel (
	clock,
	red,
	green,
	blue,
	sw);
input 	clock;
output 	red;
output 	green;
output 	blue;
input 	[2:0] sw;

// Design Ports Information
// clock	=>  Location: PIN_84,	 I/O Standard: 2.5 V,	 Current Strength: Default
// red	=>  Location: PIN_42,	 I/O Standard: 2.5 V,	 Current Strength: Default
// green	=>  Location: PIN_54,	 I/O Standard: 2.5 V,	 Current Strength: Default
// blue	=>  Location: PIN_32,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sw[0]	=>  Location: PIN_111,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sw[1]	=>  Location: PIN_3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sw[2]	=>  Location: PIN_133,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("final_min_1200mv_0c_v_fast.sdo");
// synopsys translate_on

wire \clock~input_o ;
wire \sw[0]~input_o ;
wire \sw[1]~input_o ;
wire \sw[2]~input_o ;
wire \red~output_o ;
wire \green~output_o ;
wire \blue~output_o ;


// Location: IOOBUF_X3_Y0_N2
cycloneive_io_obuf \red~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\red~output_o ),
	.obar());
// synopsys translate_off
defparam \red~output .bus_hold = "false";
defparam \red~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X18_Y0_N23
cycloneive_io_obuf \green~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\green~output_o ),
	.obar());
// synopsys translate_off
defparam \green~output .bus_hold = "false";
defparam \green~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y6_N16
cycloneive_io_obuf \blue~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\blue~output_o ),
	.obar());
// synopsys translate_off
defparam \blue~output .bus_hold = "false";
defparam \blue~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X34_Y9_N15
cycloneive_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X30_Y24_N22
cycloneive_io_ibuf \sw[0]~input (
	.i(sw[0]),
	.ibar(gnd),
	.o(\sw[0]~input_o ));
// synopsys translate_off
defparam \sw[0]~input .bus_hold = "false";
defparam \sw[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y23_N15
cycloneive_io_ibuf \sw[1]~input (
	.i(sw[1]),
	.ibar(gnd),
	.o(\sw[1]~input_o ));
// synopsys translate_off
defparam \sw[1]~input .bus_hold = "false";
defparam \sw[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X13_Y24_N22
cycloneive_io_ibuf \sw[2]~input (
	.i(sw[2]),
	.ibar(gnd),
	.o(\sw[2]~input_o ));
// synopsys translate_off
defparam \sw[2]~input .bus_hold = "false";
defparam \sw[2]~input .simulate_z_as = "z";
// synopsys translate_on

assign red = \red~output_o ;

assign green = \green~output_o ;

assign blue = \blue~output_o ;

endmodule
